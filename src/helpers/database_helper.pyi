#!/usr/bin/env python3

import discord
from discord.ext import commands

import asyncio
import asyncpg

import os

from .cache import LFUCache

from typing import Callable, Any, Coroutine, Tuple, Dict, Union, Optional

def with_connection() -> Callable[
    [Any], Coroutine[[Any, Tuple[Any], Dict[Any, Any]], Any]
]:
    def wrapper(method) -> Coroutine[[Any, Tuple[Any], Dict[Any, Any]], Any]:
        async def get_connection(self, *args, **kwargs) -> Any: ...

class Database:
    def __init__(
        self: Database, db_info_path: str = ..., loop: asyncio.BaseEventLoop = ...
    ) -> None:
        source: str = ...
        database_info_path: str = ...

        config: Dict = ...
        database_info: Dict = ...

        self._database_info: Dict = ...
        self._pool: Optional[asyncpg.Pool] = ...
        self.cache: LFUCache = ...
        self.loop: asyncio.BaseEventLoop = ...
    async def connect(self: Database): ...
    async def get_prefix(self: Database, ctx: commands.Context) -> str:
        channel: discord.Message = ...
        guild_id: str = ...

        prefix: Union[str, int] = ...
    async def _get_prefix(
        self: Database, guild_id: int, connection: Optional[asyncpg.Connection] = ...
    ) -> str:
        row: asyncpg.Record = ...
    async def set_prefix(
        self: Database,
        ctx: commands.Context,
        prefix: str,
        connection: Optional[asyncpg.Connection] = ...,
    ):
        guild_id: str = ...
    def is_connected(self: Database) -> bool: ...
    async def close(self: Database, timeout: int = ...): ...
