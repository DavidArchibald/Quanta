#!/usr/bin/env python3

import discord
from discord.ext import commands

import re

from typing import List, Union

from ..helpers.fuzzy_user import FuzzyUser
from ..helpers.database_helper import Database

class AdminCommands:
    icon: str = ...
    def __init__(self: AdminCommands, database: Database) -> None:
        self.database: Database = ...
        self.clearing_channels: List[discord.Channel] = ...
    async def purge(
        self: AdminCommands,
        ctx: commands.Context,
        limit: int = ...,
        fuzzy_user: FuzzyUser = ...,
    ):
        user: Union[discord.Member, discord.User, str] = ...
        _: discord.Message = ...
        def check_user(message: discord.Message) -> bool: ...
    async def clear_all(self: AdminCommands, ctx: commands.Context):
        deleted_message: int = ...

        confirm: bool = ...
        confirm_message: discord.Message = ...

        prefix: str = ...
    async def stop_clearing(self: AdminCommands, ctx: commands.Context): ...
    async def kick(
        self: AdminCommands, ctx: commands.Context, user: FuzzyUser, reason: str = ...
    ):
        for_reason: str = ...
    async def set_prefix(
        self: AdminCommands, ctx: commands.Context, *, prefix: Optional[str] = ...
    ):
        confirm: Optional[bool] = ...
        message: Optional[discord.Message] = ...

        no_change_message: str = ...
        current_prefix: str = ...

        has_reference: re.RegexObject = ...
        references: list = ...

        raw_bot_mention: str = ...
        bot_mention: str = ...

        prefix_casefold: str = ...

        boundary_quotes: re.RegexObject = ...
        match: Optional[str] = ...
        prefix_casefold: str = ...

        confirm: bool = ...
        message: discord.Message = ...

        markdown: Tuple[str] = ...

        unexpected_exception: str = ...

        prefix_set: str = ...

def setup(bot: commands.Bot, database: Database): ...
